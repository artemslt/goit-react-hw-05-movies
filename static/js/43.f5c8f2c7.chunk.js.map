{"version":3,"file":"static/js/43.f5c8f2c7.chunk.js","mappings":"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","sources":["API/api.js","components/helpers/Messages.jsx","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\nimport { errorMessage } from '../components/helpers/Messages';\n\nconst API_KEY = '93d454aeb43c6f394ac0bb2f4b913efd';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const moviedbApi = axios.create({\n  baseURL: BASE_URL,\n  params: { api_key: API_KEY, page: '1' },\n});\n\nexport async function trendMovies(page) {\n  try {\n    const res = await moviedbApi.get('/trending/movie/week', {\n      params: { page: page },\n    });\n\n    return res.data;\n  } catch (error) {\n    errorMessage();\n  }\n}\n\nexport async function searchMovies(searchQuery, page) {\n  try {\n    const res = await moviedbApi.get('/search/movie', {\n      params: { query: searchQuery, page: page },\n    });\n    return res.data;\n  } catch (error) {\n    errorMessage();\n  }\n}\n\nexport async function GetMovieDetails(id) {\n  try {\n    const res = await moviedbApi.get(`/movie/${id}`);\n    return res.data;\n  } catch (error) {\n    errorMessage();\n  }\n}\n\nexport async function GetMovieCast(id) {\n  try {\n    const res = await moviedbApi.get(`/movie/${id}/credits`);\n    return res.data;\n  } catch (error) {\n    errorMessage();\n  }\n}\n\nexport async function GetMovieReviews(id) {\n  try {\n    const res = await moviedbApi.get(`/movie/${id}/reviews`);\n    return res.data;\n  } catch (error) {\n    errorMessage();\n  }\n}\n","import { toast } from 'react-toastify';\n\nexport const notFindMessage = () => {\n  toast.warning(\"Sorry, we didn't find matches.\", {\n    position: toast.POSITION.TOP_RIGHT,\n  });\n};\nexport const findMessage = number => {\n  toast.info(`We find ${number} movies`, {\n    position: toast.POSITION.TOP_RIGHT,\n  });\n};\n\nexport const errorMessage = () => {\n  toast.error('Sorry something go wrong!', {\n    position: toast.POSITION.TOP_RIGHT,\n  });\n};\n\nexport const noQueryMessage = () => {\n  toast.warning('Enter a new serch word, please!', {\n    position: toast.POSITION.TOP_RIGHT,\n  });\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 16px;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`;\n\nexport const Poster = styled.img`\n  width: 360px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nexport const AdditionalInfoWrapper = styled.ul`\n  display: flex;\n  gap: 16px;\n  margin-top: 20px;\n\n  > li {\n    display: flex;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport {\n  InfoWrapper,\n  Poster,\n  Wrapper,\n  AdditionalInfoWrapper,\n} from './MovieCard.styled';\nimport { LinkButton } from '../LinkButton/LinkButton';\n\nexport const MovieCard = ({\n  poster_path,\n  title,\n  vote_average,\n  overview,\n  genres,\n  release_date,\n}) => {\n  const ratingNormalize = value => {\n    const rating = value * 10;\n    return rating.toFixed(1) + '%';\n  };\n \n  return (\n    <Wrapper>\n      <Poster src={'https://image.tmdb.org/t/p/w500' + poster_path} alt=\"\" />\n      <InfoWrapper>\n        <h2>{title}</h2>\n        <p>user score: {ratingNormalize(vote_average)}</p>\n        <h3>Release date</h3>\n        <p>{release_date}</p>\n        <h3>Overview</h3>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <p>{genres?.map(genre => genre.name).join(' ')}</p>\n        <div>\n          <h4>Additional information</h4>\n          <AdditionalInfoWrapper>\n            <li>\n              <LinkButton to=\"cast\">Cast</LinkButton>\n            </li>\n            <li>\n              <LinkButton to=\"reviews\">Reviews</LinkButton>\n            </li>\n          </AdditionalInfoWrapper>\n        </div>\n      </InfoWrapper>\n    </Wrapper>\n  );\n};\n\nMovieCard.propTypes = {\n  title: PropTypes.string,\n  poster_path: PropTypes.string,\n  vote_average: PropTypes.number,\n  overview: PropTypes.string,\n  genres: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n    })\n  ),\n  release_date: PropTypes.string,\n};\n","import { useState, useEffect, useRef, Suspense } from 'react';\nimport { useParams, Outlet } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { GetMovieDetails } from '../API/api';\nimport { MovieCard } from '../components/MovieCard/MovieCard';\nimport { useLocation } from 'react-router-dom';\nimport { LinkButton } from '../components/LinkButton/LinkButton';\nimport { Loader } from '../components/Loader/Loader';\nimport { errorMessage } from '../components/helpers/Messages';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [status, setStatus] = useState(Status.IDLE);\n  const { id } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    setStatus(Status.PENDING);\n\n    GetMovieDetails(id)\n      .then(res => {\n        setMovie(res);\n      })\n      .catch(() => {\n        setStatus(Status.REJECTED);\n        errorMessage();\n      })\n      .finally(setStatus(Status.RESOLVED));\n  }, [id]);\n\n  return (\n    <main>\n      <LinkButton to={backLinkHref.current}>Back</LinkButton>\n      {status === Status.PENDING && <Loader isLoading={true} />}\n      <MovieCard\n        poster_path={movie.poster_path}\n        title={movie.title}\n        vote_average={movie.vote_average}\n        overview={movie.overview}\n        genres={movie.genres}\n        release_date={movie.release_date}\n      />\n      <ToastContainer />\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["moviedbApi","axios","baseURL","params","api_key","page","trendMovies","get","res","data","errorMessage","searchMovies","searchQuery","query","GetMovieDetails","id","GetMovieCast","GetMovieReviews","notFindMessage","toast","position","findMessage","number","noQueryMessage","Wrapper","styled","Poster","InfoWrapper","AdditionalInfoWrapper","MovieCard","value","poster_path","title","vote_average","overview","genres","release_date","src","alt","toFixed","map","genre","name","join","LinkButton","to","Status","useState","movie","setMovie","status","setStatus","useParams","location","useLocation","backLinkHref","useRef","state","from","useEffect","then","catch","finally","current","Loader","isLoading","Suspense","fallback"],"sourceRoot":""}